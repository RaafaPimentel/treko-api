{
  "stats": {
    "suites": 14,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2020-09-11T20:38:28.058Z",
    "end": "2020-09-11T20:38:28.291Z",
    "duration": 233,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b6bceffd-8ef9-45c9-95f7-6560b1fab41d",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7ea67dbf-034f-4590-b194-ad3f28cb93d9",
          "title": "delete",
          "fullFile": "/Users/papito/Work/Temp/treko-api/test/delete.spec.js",
          "file": "/test/delete.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9ffadfa4-40c9-4d10-9cd6-b399ddae1fa5",
              "title": "quando apago uma tarefa",
              "fullFile": "/Users/papito/Work/Temp/treko-api/test/delete.spec.js",
              "file": "/test/delete.spec.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook",
                  "fullTitle": "delete quando apago uma tarefa \"before all\" hook",
                  "timedOut": false,
                  "duration": 70,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_task2.default.insertMany([task], function (error, docs) {\n    request.delete('/task/' + task._id).end(function (err, res) {\n        expect(res).to.have.status(200);\n        expect(res.body).to.eql({});\n        done();\n    });\n});",
                  "err": {},
                  "uuid": "37f773ac-1606-4643-9df5-ed09088e68a6",
                  "parentUUID": "9ffadfa4-40c9-4d10-9cd6-b399ddae1fa5",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "então o retorno deve ser 404",
                  "fullTitle": "delete quando apago uma tarefa então o retorno deve ser 404",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.get('/task/' + task._id).end(function (err, res) {\n    expect(res).to.have.status(404);\n    done();\n});",
                  "err": {},
                  "uuid": "575a5ffc-61e9-45a5-88a1-72b95570d6bd",
                  "parentUUID": "9ffadfa4-40c9-4d10-9cd6-b399ddae1fa5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "575a5ffc-61e9-45a5-88a1-72b95570d6bd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9177b17b-126e-466d-95f0-68c412add897",
              "title": "quando a tarefa nao existe",
              "fullFile": "/Users/papito/Work/Temp/treko-api/test/delete.spec.js",
              "file": "/test/delete.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deve retornar 200",
                  "fullTitle": "delete quando a tarefa nao existe deve retornar 200",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var id = require('mongoose').Types.ObjectId();\nrequest.delete('/task/' + id).end(function (err, res) {\n    expect(res).to.have.status(404);\n    expect(res.body).to.eql({});\n    done();\n});",
                  "err": {},
                  "uuid": "54ca5806-d639-467f-814d-80a1b3769148",
                  "parentUUID": "9177b17b-126e-466d-95f0-68c412add897",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "54ca5806-d639-467f-814d-80a1b3769148"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "258b9a8b-1b38-446a-a2ae-8dc226d18de4",
          "title": "get",
          "fullFile": "/Users/papito/Work/Temp/treko-api/test/get.spec.js",
          "file": "/test/get.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "90a6c30a-0edf-42de-b011-6dc5ebe1ccea",
              "title": "quando eu tenho tarefas cadastradas",
              "fullFile": "/Users/papito/Work/Temp/treko-api/test/get.spec.js",
              "file": "/test/get.spec.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook",
                  "fullTitle": "get quando eu tenho tarefas cadastradas \"before all\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var tasks = [{ title: 'Aprender NodejS', owner: 'eu@papito.io', done: false }, { title: 'Fazer compras', owner: 'eu@papito.io', done: false }, { title: 'Estudar MongoDB', owner: 'eu@papito.io', done: true }];\n_task2.default.insertMany(tasks, function (error, docs) {\n    expect(error).to.be.null;\n});\ndone();",
                  "err": {},
                  "uuid": "d0ea6899-2f3f-4e6e-8876-8111bc499aec",
                  "parentUUID": "90a6c30a-0edf-42de-b011-6dc5ebe1ccea",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deve retornar uma lista",
                  "fullTitle": "get quando eu tenho tarefas cadastradas deve retornar uma lista",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.get('/task').end(function (err, res) {\n    expect(res).to.has.status(200);\n    expect(res.body.data).to.be.an('array');\n    done();\n});",
                  "err": {},
                  "uuid": "86638b2a-2a09-420a-b499-da60a28472af",
                  "parentUUID": "90a6c30a-0edf-42de-b011-6dc5ebe1ccea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deve filtrar por palavra chave",
                  "fullTitle": "get quando eu tenho tarefas cadastradas deve filtrar por palavra chave",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.get('/task').query({ title: 'MongoDB' }).end(function (err, res) {\n    expect(res).to.has.status(200);\n    expect(res.body.data[0].title).to.equal('Estudar MongoDB');\n    done();\n});",
                  "err": {},
                  "uuid": "85e1e260-1a0b-416f-afe5-981d1a2128ab",
                  "parentUUID": "90a6c30a-0edf-42de-b011-6dc5ebe1ccea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "86638b2a-2a09-420a-b499-da60a28472af",
                "85e1e260-1a0b-416f-afe5-981d1a2128ab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 18,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "060d8935-3d41-4c95-8ae3-77907d910017",
              "title": "quando busco por id",
              "fullFile": "/Users/papito/Work/Temp/treko-api/test/get.spec.js",
              "file": "/test/get.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deve retornar uma única tarefa",
                  "fullTitle": "get quando busco por id deve retornar uma única tarefa",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var tasks = [{ title: 'Ler um livro de Javascript', owner: 'eu@papito.io', done: false }];\n_task2.default.insertMany(tasks, function (err, result) {\n    var id = result[0]._id;\n    request.get('/task/' + id).end(function (err, res) {\n        expect(res).to.has.status(200);\n        expect(res.body.data.title).to.equal(tasks[0].title);\n        done();\n    });\n});",
                  "err": {},
                  "uuid": "6f0b818f-ad10-4153-a4c4-638c2a452dd7",
                  "parentUUID": "060d8935-3d41-4c95-8ae3-77907d910017",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6f0b818f-ad10-4153-a4c4-638c2a452dd7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "539ee008-60bf-447b-9289-97bda2bbb17f",
              "title": "quando a tarefa nao existe",
              "fullFile": "/Users/papito/Work/Temp/treko-api/test/get.spec.js",
              "file": "/test/get.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deve retornar 404",
                  "fullTitle": "get quando a tarefa nao existe deve retornar 404",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var id = require('mongoose').Types.ObjectId();\nrequest.get('/task/' + id).end(function (err, res) {\n    expect(res).to.has.status(404);\n    expect(res.body).to.eql({});\n    done();\n});",
                  "err": {},
                  "uuid": "7cf269cf-3205-4cb4-9e29-b16c55f28dfb",
                  "parentUUID": "539ee008-60bf-447b-9289-97bda2bbb17f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7cf269cf-3205-4cb4-9e29-b16c55f28dfb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0ae45e39-3c03-4112-8849-2a7c329137a0",
          "title": "post",
          "fullFile": "/Users/papito/Work/Temp/treko-api/test/post.spec.js",
          "file": "/test/post.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9d32b776-6bb7-45ff-b9dd-849413dd1fb0",
              "title": "quando eu cadastro uma tarefa",
              "fullFile": "/Users/papito/Work/Temp/treko-api/test/post.spec.js",
              "file": "/test/post.spec.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook",
                  "fullTitle": "post quando eu cadastro uma tarefa \"before all\" hook",
                  "timedOut": false,
                  "duration": 10,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "rabbit.delete(\"/api/queues/%2F/tasksdev/contents\").auth('guest', 'guest').end(function (err, res) {\n    expect(res).to.has.status(204);\n    done();'';\n});",
                  "err": {},
                  "uuid": "f7c28be6-0949-4e6a-ba42-653007d9f420",
                  "parentUUID": "9d32b776-6bb7-45ff-b9dd-849413dd1fb0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "entao deve retornar 200",
                  "fullTitle": "post quando eu cadastro uma tarefa entao deve retornar 200",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.post('/task').send(task).end(function (err, res) {\n    expect(res).to.has.status(200);\n    expect(res.body.data.title).to.be.an('string');\n    expect(res.body.data.owner).to.be.an('string');\n    expect(res.body.data.done).to.be.an('boolean');\n    done();\n});",
                  "err": {},
                  "uuid": "c226ad2c-37b5-4c16-9955-155202d19ade",
                  "parentUUID": "9d32b776-6bb7-45ff-b9dd-849413dd1fb0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "e deve enviar email",
                  "fullTitle": "post quando eu cadastro uma tarefa e deve enviar email",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var payload = { vhost: \"/\", name: \"tasksdev\", truncate: \"50000\", ackmode: \"ack_requeue_true\", encoding: \"auto\", count: \"1000\" };\nrabbit.post(\"/api/queues/%2f/tasksdev/get\").auth('guest', 'guest').send(payload).end(function (err, res) {\n    expect(res).to.have.status(200);\n    expect(res.body[0].payload).to.contain('Tarefa ' + task.title + ' criada com sucesso!');\n    done();\n});",
                  "err": {},
                  "uuid": "ba3d9b0d-7ced-492e-a8c9-64a376436724",
                  "parentUUID": "9d32b776-6bb7-45ff-b9dd-849413dd1fb0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c226ad2c-37b5-4c16-9955-155202d19ade",
                "ba3d9b0d-7ced-492e-a8c9-64a376436724"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 31,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e165dc0a-6ac7-4a4d-bfc0-79a1cf81f779",
              "title": "quando nao informo o titulo",
              "fullFile": "/Users/papito/Work/Temp/treko-api/test/post.spec.js",
              "file": "/test/post.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "entao deve retornar 400",
                  "fullTitle": "post quando nao informo o titulo entao deve retornar 400",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.post('/task').send(task).end(function (err, res) {\n    expect(res).to.has.status(400);\n    expect(res.body.errors.title.message).to.eql('Oops! Title is required.');\n    done();\n});",
                  "err": {},
                  "uuid": "dfeae15b-73a8-4db3-a447-266e468b2f61",
                  "parentUUID": "e165dc0a-6ac7-4a4d-bfc0-79a1cf81f779",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dfeae15b-73a8-4db3-a447-266e468b2f61"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9b660862-066f-4496-b33f-855b06c077f5",
              "title": "quando nao informo o dono",
              "fullFile": "/Users/papito/Work/Temp/treko-api/test/post.spec.js",
              "file": "/test/post.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "entao deve retornar 400",
                  "fullTitle": "post quando nao informo o dono entao deve retornar 400",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.post('/task').send(task).end(function (err, res) {\n    expect(res).to.has.status(400);\n    expect(res.body.errors.owner.message).to.eql('Oops! Owner is required.');\n    done();\n});",
                  "err": {},
                  "uuid": "0493499f-308c-49bc-a127-9632ba21d24b",
                  "parentUUID": "9b660862-066f-4496-b33f-855b06c077f5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0493499f-308c-49bc-a127-9632ba21d24b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "99d97c78-8359-4983-9392-5c796a18e717",
              "title": "quando a tarefa já existe",
              "fullFile": "/Users/papito/Work/Temp/treko-api/test/post.spec.js",
              "file": "/test/post.spec.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook",
                  "fullTitle": "post quando a tarefa já existe \"before all\" hook",
                  "timedOut": false,
                  "duration": 7,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.post('/task').send(task).end(function (err, res) {\n    expect(res).to.has.status(200);\n    done();\n});",
                  "err": {},
                  "uuid": "522c8aa4-2cf8-44db-98c8-f1d11051241f",
                  "parentUUID": "99d97c78-8359-4983-9392-5c796a18e717",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deve retornar 409",
                  "fullTitle": "post quando a tarefa já existe deve retornar 409",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.post('/task').send(task).end(function (err, res) {\n    expect(res).to.has.status(409);\n    expect(res.body.name).to.include('MongoError');\n    done();\n});",
                  "err": {},
                  "uuid": "38721a9e-ebb6-459b-8940-914cabed84a8",
                  "parentUUID": "99d97c78-8359-4983-9392-5c796a18e717",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "38721a9e-ebb6-459b-8940-914cabed84a8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "31037c2f-0ec1-442e-8b33-b39c41eaa0e1",
          "title": "put",
          "fullFile": "/Users/papito/Work/Temp/treko-api/test/put.spec.js",
          "file": "/test/put.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c9ba7555-3d64-46fb-b6f0-0a0e1609b6fc",
              "title": "quando eu altero uma tarefa",
              "fullFile": "/Users/papito/Work/Temp/treko-api/test/put.spec.js",
              "file": "/test/put.spec.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook",
                  "fullTitle": "put quando eu altero uma tarefa \"before all\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_task2.default.insertMany([task], function (error, docs) {\n    expect(error).to.be.null;\n});\ndone();",
                  "err": {},
                  "uuid": "53709713-a816-4fd1-b436-4ac26c4c93c9",
                  "parentUUID": "c9ba7555-3d64-46fb-b6f0-0a0e1609b6fc",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "entao deve retornar 200",
                  "fullTitle": "put quando eu altero uma tarefa entao deve retornar 200",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "task.title = 'Comprar Baconzitos', task.done = true;\nrequest.put('/task/' + task._id).send(task).end(function (err, res) {\n    expect(res).to.have.status(200);\n    expect(res.body).to.eql({});\n    done();\n});",
                  "err": {},
                  "uuid": "f0df9752-55e7-4dd3-b9b6-2f4d096fa124",
                  "parentUUID": "c9ba7555-3d64-46fb-b6f0-0a0e1609b6fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "e deve retornar os dados atualizados",
                  "fullTitle": "put quando eu altero uma tarefa e deve retornar os dados atualizados",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.get('/task/' + task._id).end(function (err, res) {\n    expect(res).to.have.status(200);\n    expect(res.body.data.title).to.eql(task.title);\n    expect(res.body.data.done).to.be.true;\n    done();\n});",
                  "err": {},
                  "uuid": "ff043166-21e3-43f9-8f06-64fd9a5a9a92",
                  "parentUUID": "c9ba7555-3d64-46fb-b6f0-0a0e1609b6fc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f0df9752-55e7-4dd3-b9b6-2f4d096fa124",
                "ff043166-21e3-43f9-8f06-64fd9a5a9a92"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": null,
      "version": "4.1.0"
    }
  }
}